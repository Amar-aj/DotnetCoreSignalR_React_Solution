@page "/userwise/{userName}"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<div class="form-group">
    <label>
        Send To:
        <select @bind="selectedUser">
            @foreach (var user in connectedClients)
            {
                <option value="@user">@user</option>
            }
        </select>
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

<hr>

<ul id="connectedClients">
    <li>Connected Users:</li>
    @foreach (var client in connectedClients)
    {
        <li>@client</li>
    }
</ul>

@code {
    [Parameter]
    public string? userName { get; set; }

    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private List<string> connectedClients = new List<string>();
    private string? messageInput;
    private string? selectedUser;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7250/chathub")
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await RefreshConnectedClients();
    }

    private async Task RefreshConnectedClients()
    {
        if (hubConnection is not null)
        {
            connectedClients = await hubConnection.InvokeAsync<List<string>>("GetConnectedClients");
            StateHasChanged();
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            if (!string.IsNullOrEmpty(selectedUser))
            {
                await hubConnection.SendAsync("SendMessageAsync", messageInput, userName, selectedUser);
            }
            else
            {
                // Send a public message if no specific user is selected
                await hubConnection.SendAsync("SendMessage", userName, messageInput);
            }
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
